{"version":3,"sources":["components/Login/Login.js","components/Contacts/Contacts.js","App.js","reportWebVitals.js","index.js","components/Contacts/Contacts.module.css","components/Login/Login.module.css"],"names":["Login","props","history","useHistory","validateEmail","value","error","test","length","validatePassword","console","log","initialValues","email","password","onSubmit","values","a","resetForm","axios","data","push","errors","touched","isValidating","className","styles","container","holder","card","card__text","Form","Group","controlId","classForm","component","TextFieldFMUI","id","name","label","variant","type","validate","helperText","fullWidth","Button","color","Alert","elevation","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","p","Typography","a11yProps","CustomToggle","eventKey","onClickSideBehaviour","isFullWidth","disabled","decoratedOnClick","useAccordionToggle","onClick","onKeyDown","keyEvent","charCode","keyCode","preventDefault","Contacts","useState","idToDelete","setIdToDelete","React","openDeletingContactConfirmationAlertDialog","setOpenDeletingContactConfirmationAlertDialog","handleCloseDeletingContactConfirmationAlertDialog","openAlertContactEdited","setOpenAlertContactEdited","handleCloseAlertContactEdited","event","reason","valueAddContactTabs","setValueAddContactTabs","handleChangeAddContactTabs","newValue","contacts","users","setUsers","validateName","validatePhoneNumber","useEffect","newData","map","el","isEditing","fetchData","openAddContact","setOpenAddContact","window","dispatchEvent","CustomEvent","searchTerm","setSearchTerm","searchResults","setSearchResults","results","filter","person","toLowerCase","includes","contactsContainer","Dialog","open","onClose","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Snackbar","autoHideDuration","severity","Container","Accordion","defaultActiveKey","Navbar","bg","expand","sticky","Brand","href","Nav","inline","FormControl","placeholder","onChange","target","Card","Collapse","in","Body","username","address","street","suite","city","zipcode","geo","lat","lng","phone","website","company","catchPhrase","bs","subData","concat","Grid","spacing","item","xs","sm","md","lg","Tabs","indicatorColor","textColor","Tab","selected","contactCards","contactCard","Row","Col","avatarAndNameCol","Image","avatar","src","alt","rounded","fluid","cityCol","actions","setSubmitting","setTimeout","InputLabelProps","shrink","size","InputProps","endAdornment","readOnly","dirty","isSubmitting","contactId","App","basename","process","exact","path","to","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b21929d7.chunk.js","sourcesContent":["import { Form, Button } from \"react-bootstrap\";\r\nimport * as axios from \"axios\";\r\n\r\nimport React from \"react\";\r\nimport styles from \"./Login.module.css\";\r\n\r\nimport { Formik, Field, Form as FormikForm } from \"formik\";\r\nimport { TextField as TextFieldFMUI } from \"formik-material-ui\";\r\nimport ButtonMUI from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nfunction Login(props) {\r\n  //for page routing\r\n  let history = useHistory();\r\n  function onSubmitFromLogin() {\r\n    history.push(\"/contacts\");\r\n    console.log(history);\r\n  }\r\n\r\n  //validation\r\n  console.log(props);\r\n  function validateEmail(value) {\r\n    let error;\r\n    if (!value) {\r\n      error = \"Required\";\r\n    } else if (\r\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) &&\r\n      value\r\n    ) {\r\n      error = \"Invalid email address\";\r\n    } else if (value.length > 25) {\r\n      error = \"Too long\";\r\n    }\r\n    return error;\r\n  }\r\n\r\n  function validatePassword(value) {\r\n    let error;\r\n    if (!value) {\r\n      error = \"Required\";\r\n    } else if (value.length > 25) {\r\n      error = \"Too long\";\r\n    }\r\n    return error;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n        }}\r\n        //POST to server\r\n        onSubmit={async (values, { resetForm }) => {\r\n          console.log(values);\r\n          const { data } = await axios.post(\r\n            \"https://jsonplaceholder.typicode.com/users\",\r\n            {\r\n              values,\r\n            }\r\n          );\r\n\r\n          //routing after POST\r\n          onSubmitFromLogin();\r\n\r\n          //reset form\r\n          resetForm();\r\n        }}\r\n      >\r\n        {/* FORMIK FORM */}\r\n        {({ errors, touched, isValidating }) => (\r\n          <FormikForm className={styles.container}>\r\n            <div className={styles.holder}>\r\n              <div className={styles.card}>\r\n                <div className={styles.card__text}>\r\n                  <Form.Group\r\n                    controlId=\"formBasicEmail\"\r\n                    className={styles.classForm}\r\n                  >\r\n                    <Field\r\n                      component={TextFieldFMUI}\r\n                      id=\"email\"\r\n                      name=\"email\"\r\n                      label=\"Email\"\r\n                      variant=\"outlined\"\r\n                      type=\"email\"\r\n                      validate={validateEmail}\r\n                      helperText=\"Enter email\"\r\n                      fullWidth\r\n                    />\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId=\"formBasicPassword\">\r\n                    <Field\r\n                      component={TextFieldFMUI}\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      variant=\"outlined\"\r\n                      type=\"password\"\r\n                      validate={validatePassword}\r\n                      helperText=\"Enter password\"\r\n                      fullWidth\r\n                    />\r\n                  </Form.Group>\r\n\r\n                  <ButtonMUI\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    // disabled\r\n                  >\r\n                    Login\r\n                  </ButtonMUI>\r\n\r\n                  <ButtonMUI\r\n                    // variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"reset\"\r\n                    fullWidth\r\n                    // disabled\r\n                  >\r\n                    Reset\r\n                  </ButtonMUI>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </FormikForm>\r\n        )}\r\n        {/* END FORMIK FORM */}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as axios from \"axios\";\r\nimport styles from \"./Contacts.module.css\";\r\nimport \"./Contacts.module.css\";\r\n\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  Form,\r\n  FormControl,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Image,\r\n  Accordion,\r\n  Card,\r\n  useAccordionToggle,\r\n} from \"react-bootstrap\";\r\n\r\nimport { Formik, Field, Form as FormikForm } from \"formik\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TabsMUI from \"@material-ui/core/Tabs\";\r\nimport TabMUI from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport ButtonMUI from \"@material-ui/core/Button\";\r\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nimport { TextField as TextFieldFMUI } from \"formik-material-ui\";\r\n\r\n//for alert when contact successfully edited\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n//tab panel for add contact\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\n//custom toggle for accordion custom toggle\r\nfunction CustomToggle({\r\n  children,\r\n  eventKey,\r\n  onClickSideBehaviour,\r\n  type,\r\n  isFullWidth = false,\r\n  variant = \"outlined\",\r\n  color = \"primary\",\r\n  disabled = false,\r\n}) {\r\n  const decoratedOnClick = useAccordionToggle(eventKey, onClickSideBehaviour);\r\n\r\n  return (\r\n    <ButtonMUI\r\n      fullWidth={isFullWidth}\r\n      type={type}\r\n      variant={variant}\r\n      color={color}\r\n      onClick={decoratedOnClick}\r\n      disabled={disabled}\r\n    >\r\n      {children}\r\n    </ButtonMUI>\r\n  );\r\n}\r\n\r\n//prevent submit on enter\r\nfunction onKeyDown(keyEvent) {\r\n  if ((keyEvent.charCode || keyEvent.keyCode) === 13) {\r\n    keyEvent.preventDefault();\r\n  }\r\n}\r\n\r\nfunction Contacts(props) {\r\n  //experemental behaviour for deleting users wit modal dialog\r\n  const [idToDelete, setIdToDelete] = useState(null);\r\n\r\n  //for deleting contact confirmation alert dialog\r\n  const [\r\n    openDeletingContactConfirmationAlertDialog,\r\n    setOpenDeletingContactConfirmationAlertDialog,\r\n  ] = React.useState(false);\r\n\r\n  const handleClickOpenDeletingContactConfirmationAlertDialog = (contactId) => {\r\n    setIdToDelete(contactId);\r\n    setOpenDeletingContactConfirmationAlertDialog(true);\r\n  };\r\n\r\n  const handleCloseDeletingContactConfirmationAlertDialog = () => {\r\n    setOpenDeletingContactConfirmationAlertDialog(false);\r\n  };\r\n\r\n  //hook for alert when contact successfully edited\r\n  const [openAlertContactEdited, setOpenAlertContactEdited] = React.useState(\r\n    false\r\n  );\r\n\r\n  const handleOpenAlertContactEdited = () => {\r\n    setOpenAlertContactEdited(true);\r\n  };\r\n\r\n  const handleCloseAlertContactEdited = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpenAlertContactEdited(false);\r\n  };\r\n\r\n  //hook for tabs from material-ui (select the tab on add contact)\r\n  const [valueAddContactTabs, setValueAddContactTabs] = React.useState(0);\r\n\r\n  const handleChangeAddContactTabs = (event, newValue) => {\r\n    setValueAddContactTabs(newValue);\r\n  };\r\n\r\n  //users GET\r\n  const [users, setUsers] = useState({ contacts: [] });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data } = await axios.get(\r\n        \"https://jsonplaceholder.typicode.com/users\"\r\n      );\r\n      //add isEditing value\r\n      const newData = data.map((el) => {\r\n        return { ...el, isEditing: false };\r\n      });\r\n      setUsers({ contacts: newData });\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  //users POST\r\n  // function addContact() {\r\n  //   const fetchData = async () => {\r\n  //     const { data } = await axios.post(\r\n  //       \"https://jsonplaceholder.typicode.com/users\",\r\n  //       {\r\n  //         name: \"Nicholas Runolfsdottir V\",\r\n  //         username: \"Maxime_Nienow\",\r\n  //         email: \"Sherwood@rosamond.me\",\r\n  //         address: {\r\n  //           street: \"Ellsworth Summit\",\r\n  //           suite: \"Suite 729\",\r\n  //           city: \"Aliyaview\",\r\n  //           zipcode: \"45169\",\r\n  //           geo: {\r\n  //             lat: \"-14.3990\",\r\n  //             lng: \"-120.7677\",\r\n  //           },\r\n  //         },\r\n  //         phone: \"586.493.6943 x140\",\r\n  //         website: \"jacynthe.com\",\r\n  //         company: {\r\n  //           name: \"Abernathy Group\",\r\n  //           catchPhrase: \"Implemented secondary concept\",\r\n  //           bs: \"e-enable extensible e-tailers\",\r\n  //         },\r\n  //       }\r\n  //     );\r\n  //     setUsers({ contacts: users.contacts.reverse().concat(data).reverse() });\r\n  //     // alert(data.name + data.username);\r\n  //     // console.log(data);\r\n  //     // console.log({ users });\r\n  //   };\r\n  //   fetchData();\r\n  //   // axios.post('/login', {\r\n  //   //   firstName: 'Finn',\r\n  //   //   lastName: 'Williams'\r\n  //   // });\r\n  // }\r\n\r\n  //validation\r\n  function validateName(value) {\r\n    let error;\r\n    if (!value) {\r\n      error = \"Required\";\r\n    } else if (value.length > 25) {\r\n      error = \"Too long\";\r\n    } else if (value === \"admin\") {\r\n      error = \"Nice try!\";\r\n    }\r\n    return error;\r\n  }\r\n\r\n  function validatePhoneNumber(value) {\r\n    let error;\r\n    if (!value) {\r\n      error = \"Required\";\r\n    } else if (value.length > 25) {\r\n      error = \"Too long\";\r\n    }\r\n    return error;\r\n  }\r\n\r\n  function validateEmail(value) {\r\n    let error;\r\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) && value) {\r\n      error = \"Invalid email address\";\r\n    }\r\n    return error;\r\n  }\r\n\r\n  //add contact accordion toggler\r\n  const [openAddContact, setOpenAddContact] = useState(false);\r\n\r\n  //for show add contact tab indicator on first load\r\n  useEffect(() => {\r\n    window.dispatchEvent(new CustomEvent(\"resize\"));\r\n  }, [openAddContact]);\r\n\r\n  //search\r\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n\r\n  const [searchResults, setSearchResults] = React.useState([]);\r\n\r\n  const handleChangeSearchTerm = (event) => {\r\n    console.log(event.target.value);\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const results = users.contacts.filter((person) =>\r\n      person.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    console.log(results);\r\n    setSearchResults(results);\r\n  }, [searchTerm, users.contacts]);\r\n\r\n  return (\r\n    <div className={styles.contactsContainer}>\r\n      {/* MODAL DIALOG FOR DELETING CONTACT */}\r\n      <Dialog\r\n        open={openDeletingContactConfirmationAlertDialog}\r\n        onClose={handleCloseDeletingContactConfirmationAlertDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Delete contact?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Contact will be deleted\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <ButtonMUI\r\n            onClick={() => {\r\n              //clean idToDelete\r\n              setIdToDelete(null);\r\n              //close dialog\r\n              handleCloseDeletingContactConfirmationAlertDialog();\r\n            }}\r\n            color=\"primary\"\r\n          >\r\n            Cancel\r\n          </ButtonMUI>\r\n\r\n          <ButtonMUI\r\n            onClick={() => {\r\n              //deleting the contact\r\n              setUsers({\r\n                contacts: users.contacts.filter((el) => el.id !== idToDelete),\r\n              });\r\n              //clean idToDelete\r\n              setIdToDelete(null);\r\n              //close dialog\r\n              handleCloseDeletingContactConfirmationAlertDialog();\r\n            }}\r\n            color=\"secondary\"\r\n            autoFocus\r\n          >\r\n            Delete\r\n          </ButtonMUI>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {/* MODAL DIALOG FOR DELETING CONTACT */}\r\n\r\n      {/* ALERT MESSAGE FOR CONTACT EDITED */}\r\n      <Snackbar\r\n        open={openAlertContactEdited}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseAlertContactEdited}\r\n      >\r\n        <Alert onClose={handleCloseAlertContactEdited} severity=\"success\">\r\n          Success!\r\n        </Alert>\r\n      </Snackbar>\r\n      {/* END ALERT MESSAGE FOR CONTACT EDITED */}\r\n\r\n      <Container>\r\n        {/* ACCORDION WITH ADD CONTACT FORM */}\r\n        <Accordion defaultActiveKey=\"0\">\r\n          {/* NAVBAR */}\r\n          <Navbar bg=\"dark\" variant=\"dark\" expand sticky>\r\n            <Navbar.Brand href=\"#home\">Contacts</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n              <CustomToggle\r\n                eventKey=\"0\"\r\n                variant=\"contained\"\r\n                onClickSideBehaviour={() => {\r\n                  setOpenAddContact(!openAddContact);\r\n                }}\r\n              >\r\n                {openAddContact ? \"Cancel\" : \"Add contact\"}\r\n              </CustomToggle>\r\n            </Nav>\r\n\r\n            <Form inline>\r\n              <FormControl\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n                className=\"mr-sm-2\"\r\n                onChange={handleChangeSearchTerm}\r\n              />\r\n              <Button variant=\"outline-info\">Search</Button>\r\n            </Form>\r\n          </Navbar>\r\n          {/* END NAVBAR */}\r\n\r\n          <Card>\r\n            <Accordion.Collapse eventKey=\"0\" in={openAddContact}>\r\n              <Card.Body>\r\n                {/* FORMIK FOR ADD CONTACT SUBMIT*/}\r\n                <Formik\r\n                  initialValues={{\r\n                    id: \"id\",\r\n                    name: \"\",\r\n                    username: \"\",\r\n                    email: \"\",\r\n                    address: {\r\n                      street: \"\",\r\n                      suite: \"\",\r\n                      city: \"\",\r\n                      zipcode: \"\",\r\n                      geo: {\r\n                        lat: \"-14.3990\",\r\n                        lng: \"-120.7677\",\r\n                      },\r\n                    },\r\n                    phone: \"\",\r\n                    website: \"\",\r\n                    company: {\r\n                      name: \"\",\r\n                      catchPhrase: \"\",\r\n                      bs: \"\",\r\n                    },\r\n                  }}\r\n                  //POST to server\r\n                  onSubmit={async (values, { resetForm }) => {\r\n                    console.log(values);\r\n                    const { data } = await axios.post(\r\n                      \"https://jsonplaceholder.typicode.com/users\",\r\n                      {\r\n                        values,\r\n                      }\r\n                    );\r\n                    let subData = data;\r\n                    subData.values.id = users.contacts.length + 1;\r\n                    // set users with new contact\r\n                    setUsers({\r\n                      contacts: users.contacts\r\n                        // .slice(0)\r\n                        .concat(subData.values),\r\n                    });\r\n\r\n                    //reset form\r\n                    resetForm();\r\n                    //collapse the accordion\r\n                    setOpenAddContact(false);\r\n                  }}\r\n                >\r\n                  {/* FORMIK FORM */}\r\n                  {({ errors, touched, isValidating }) => (\r\n                    <FormikForm onKeyDown={onKeyDown}>\r\n                      {/* ADD CONTACT TOP REQUIRED FIELDS */}\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                          <Field\r\n                            component={TextFieldFMUI}\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            label=\"Fullname\"\r\n                            variant=\"outlined\"\r\n                            validate={validateName}\r\n                            helperText=\"Enter name\"\r\n                            fullWidth\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                          <Field\r\n                            component={TextFieldFMUI}\r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            label=\"Phone\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            validate={validatePhoneNumber}\r\n                            helperText=\"Enter phone number\"\r\n                            fullWidth\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                      {/* END ADD CONTACT  TOP REQUIRED FIELDS */}\r\n\r\n                      {/*  ADD CONTACT  TABS WITH INPUTS */}\r\n                      <TabsMUI\r\n                        variant=\"fullWidth\"\r\n                        value={valueAddContactTabs}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        onChange={handleChangeAddContactTabs}\r\n                      >\r\n                        <TabMUI label=\"Info\" {...a11yProps(0)} selected />\r\n                        <TabMUI label=\"Address\" {...a11yProps(1)} />\r\n                        <TabMUI label=\"Company\" {...a11yProps(2)} />\r\n                      </TabsMUI>\r\n\r\n                      {/* ADD CONTACT  FIRST TAB (INFO)*/}\r\n                      <TabPanel value={valueAddContactTabs} index={0}>\r\n                        <Grid container spacing={3}>\r\n                          <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                            <Field\r\n                              component={TextFieldFMUI}\r\n                              id=\"username\"\r\n                              name=\"username\"\r\n                              label=\"Skype\"\r\n                              variant=\"outlined\"\r\n                              type=\"text\"\r\n                              // validate={validatePhoneNumber}\r\n                              // helperText=\"Enter Skype login\"\r\n                              fullWidth\r\n                            />\r\n                          </Grid>\r\n\r\n                          <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                            <Field\r\n                              component={TextFieldFMUI}\r\n                              id=\"email\"\r\n                              name=\"email\"\r\n                              label=\"Email\"\r\n                              variant=\"outlined\"\r\n                              type=\"email\"\r\n                              validate={validateEmail}\r\n                              // helperText=\"Enter email\"\r\n                              fullWidth\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                            <Field\r\n                              component={TextFieldFMUI}\r\n                              id=\"website\"\r\n                              name=\"website\"\r\n                              label=\"Website\"\r\n                              variant=\"outlined\"\r\n                              type=\"text\"\r\n                              // validate={validatePhoneNumber}\r\n                              // helperText=\"Enter email\"\r\n                              fullWidth\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </TabPanel>\r\n                      {/* END ADD CONTACT  FIRST TAB (INFO) */}\r\n\r\n                      {/* ADD CONTACT SECOND TAB (ADDRESS) */}\r\n                      <TabPanel value={valueAddContactTabs} index={1}>\r\n                        <Grid container spacing={3}>\r\n                          <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                            <Field\r\n                              component={TextFieldFMUI}\r\n                              id=\"street\"\r\n                              name=\"address.street\"\r\n                              label=\"Street\"\r\n                              variant=\"outlined\"\r\n                              type=\"text\"\r\n                              // validate={validatePhoneNumber}\r\n                              // helperText=\"Enter email\"\r\n                              fullWidth\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                            <Field\r\n                              component={TextFieldFMUI}\r\n                              id=\"zipcode\"\r\n                              name=\"c\"\r\n                              label=\"Zipcode\"\r\n                              variant=\"outlined\"\r\n                              type=\"text\"\r\n                              // validate={validatePhoneNumber}\r\n                              // helperText=\"Enter email\"\r\n                              fullWidth\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                            <Field\r\n                              component={TextFieldFMUI}\r\n                              id=\"city\"\r\n                              name=\"address.city\"\r\n                              label=\"City\"\r\n                              variant=\"outlined\"\r\n                              type=\"text\"\r\n                              // validate={validatePhoneNumber}\r\n                              // helperText=\"Enter email\"\r\n                              fullWidth\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </TabPanel>\r\n                      {/* ADD CONTACT END SECOND TAB (ADDRESS) */}\r\n\r\n                      {/* ADD CONTACT THIRD TAB (COMPANY) */}\r\n                      <TabPanel value={valueAddContactTabs} index={2}>\r\n                        <Grid container spacing={3}>\r\n                          <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                            <Field\r\n                              component={TextFieldFMUI}\r\n                              id=\"companyName\"\r\n                              name=\"company.name\"\r\n                              label=\"Company name\"\r\n                              variant=\"outlined\"\r\n                              type=\"text\"\r\n                              // validate={validatePhoneNumber}\r\n                              // helperText=\"Enter email\"\r\n                              fullWidth\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                            <Field\r\n                              component={TextFieldFMUI}\r\n                              id=\"catchPhrase\"\r\n                              name=\"company.catchPhrase\"\r\n                              label=\"Catchphrase\"\r\n                              variant=\"outlined\"\r\n                              type=\"text\"\r\n                              // validate={validatePhoneNumber}\r\n                              // helperText=\"Enter email\"\r\n                              fullWidth\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                            <Field\r\n                              component={TextFieldFMUI}\r\n                              id=\"bs\"\r\n                              name=\"company.bs\"\r\n                              label=\"Business\"\r\n                              variant=\"outlined\"\r\n                              type=\"text\"\r\n                              // validate={validatePhoneNumber}\r\n                              // helperText=\"Enter email\"\r\n                              fullWidth\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </TabPanel>\r\n                      {/* ADD CONTACT END THIRD TAB (COMPANY) */}\r\n\r\n                      {/* ADD CONTACT  BUTTONS TO SUBMIT AND REST FORM */}\r\n                      <Grid container spacing={5}>\r\n                        <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                          <ButtonMUI\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            // disabled\r\n                          >\r\n                            Add\r\n                          </ButtonMUI>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                          <ButtonMUI\r\n                            // variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"reset\"\r\n                            fullWidth\r\n                            // disabled\r\n                          >\r\n                            Reset\r\n                          </ButtonMUI>\r\n                        </Grid>\r\n                      </Grid>\r\n                      {/* END ADD CONTACT BUTTONS TO SUBMIT AND REST FORM */}\r\n                    </FormikForm>\r\n                  )}\r\n                  {/* END FORMIK FORM */}\r\n                </Formik>\r\n                {/* END FORMIK FOR ADD CONTACT SUBMIT*/}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n        {/* END ACCORDION WITH ADD CONTACT FORM */}\r\n\r\n        {/* DEFINE CLASSNAME TO REVERSE CARDS DISPLAY IN CSS*/}\r\n        <div className={styles.contactCards}>\r\n          {/* CONTACT CARD */}\r\n          {/* {users.contacts &&\r\n            users.contacts.map((item) => { */}\r\n          {users.contacts &&\r\n            searchResults.map((item) => {\r\n              return (\r\n                <>\r\n                  <div key={item.id} className={styles.contactCard}>\r\n                    <Accordion>\r\n                      {/* AVATAR & NAME & PHONE */}\r\n                      <Row xs={1} sm={1} md={2} lg={2}>\r\n                        <Col className={styles.avatarAndNameCol}>\r\n                          <Image\r\n                            className={styles.avatar}\r\n                            src={`https://picsum.photos/200?random=${item.id}`}\r\n                            alt={`user_avatar_${item.id}`}\r\n                            rounded\r\n                            fluid\r\n                          />\r\n\r\n                          <span className={styles.name}>\r\n                            {item.name}\r\n                            {/* {item.id} */}\r\n                          </span>\r\n                        </Col>\r\n\r\n                        <Col className={styles.cityCol}>\r\n                          <span className={styles.city}>{item.phone}</span>\r\n\r\n                          <CustomToggle\r\n                            eventKey=\"1\"\r\n                            onClickSideBehaviour={() => {\r\n                              setUsers({\r\n                                contacts: users.contacts.map((el) => {\r\n                                  if (el.id === item.id) {\r\n                                    el.isEditing = !el.isEditing;\r\n                                  }\r\n                                  return el;\r\n                                }),\r\n                              });\r\n                            }}\r\n                          >\r\n                            Profile\r\n                          </CustomToggle>\r\n                        </Col>\r\n                      </Row>\r\n                      {/* END AVATAR & NAME & PHONE */}\r\n\r\n                      {/* ACCORDION WITH CONTACT INFORMATION TABS */}\r\n                      <Card>\r\n                        <Accordion.Collapse eventKey=\"1\" in={item.isEditing}>\r\n                          <Card.Body>\r\n                            {/* CONTACT INFORMATION FORM WITH INPUTS */}\r\n                            <Formik\r\n                              initialValues={{\r\n                                id: item.id,\r\n                                name: item.name,\r\n                                username: item.username,\r\n                                email: item.email,\r\n                                address: {\r\n                                  street: item.address.street,\r\n                                  suite: item.address.suite,\r\n                                  city: item.address.city,\r\n                                  zipcode: item.address.zipcode,\r\n                                  geo: {\r\n                                    lat: item.address.geo.lat,\r\n                                    lng: item.address.geo.lng,\r\n                                  },\r\n                                },\r\n                                phone: item.phone,\r\n                                website: item.website,\r\n                                company: {\r\n                                  name: item.company.name,\r\n                                  catchPhrase: item.company.catchPhrase,\r\n                                  bs: item.company.bs,\r\n                                },\r\n                              }}\r\n                              onSubmit={(values, actions) => {\r\n                                actions.setSubmitting(true);\r\n\r\n                                // alert(JSON.stringify(values, null, 2));\r\n\r\n                                //figure out which card to edit\r\n                                setUsers({\r\n                                  contacts: users.contacts.map((el) => {\r\n                                    if (el.id === item.id) {\r\n                                      el = values;\r\n                                      el.isEditing = !el.isEditing;\r\n                                      if (el.isEditing === true) {\r\n                                        el.isEditing = false;\r\n                                      }\r\n                                    }\r\n                                    //reset form for proper validation\r\n                                    actions.resetForm({ values: el });\r\n                                    return el;\r\n                                  }),\r\n                                });\r\n\r\n                                setTimeout(() => {\r\n                                  actions.setSubmitting(false);\r\n                                  handleOpenAlertContactEdited();\r\n                                }, 1000);\r\n                              }}\r\n                            >\r\n                              {(props) => (\r\n                                <FormikForm\r\n                                // onChange={(e) => console.log(props)}\r\n                                // onBlur={props.handleBlur}\r\n                                // disabled={true}\r\n                                // onSubmit={() => props.setSubmitting(true)}\r\n                                >\r\n                                  <Field\r\n                                    component={TextFieldFMUI}\r\n                                    // disabled={true}\r\n                                    name=\"name\"\r\n                                    label=\"Name:\"\r\n                                    validate={validateName}\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                      shrink: true,\r\n                                    }}\r\n                                    // variant=\"filled\"\r\n                                    size=\"small\"\r\n                                    InputProps={{\r\n                                      // readOnly: false,\r\n                                      endAdornment: (\r\n                                        <ButtonMUI\r\n                                          // variant=\"contained\"\r\n                                          color=\"primary\"\r\n                                        >\r\n                                          <EditOutlinedIcon />\r\n                                        </ButtonMUI>\r\n                                      ),\r\n                                    }}\r\n                                  />\r\n\r\n                                  <Field\r\n                                    component={TextFieldFMUI}\r\n                                    // disabled={true}\r\n                                    name=\"phone\"\r\n                                    label=\"Phone:\"\r\n                                    validate={validatePhoneNumber}\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                      shrink: true,\r\n                                    }}\r\n                                    // variant=\"filled\"\r\n                                    size=\"small\"\r\n                                    InputProps={{\r\n                                      readOnly: false,\r\n                                      endAdornment: (\r\n                                        <ButtonMUI\r\n                                          // variant=\"contained\"\r\n                                          color=\"primary\"\r\n                                        >\r\n                                          <EditOutlinedIcon />\r\n                                        </ButtonMUI>\r\n                                      ),\r\n                                    }}\r\n                                  />\r\n\r\n                                  <Grid container spacing={3}>\r\n                                    <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                                      Info\r\n                                      <Field\r\n                                        component={TextFieldFMUI}\r\n                                        // disabled={true}\r\n                                        name=\"username\"\r\n                                        label=\"Skype login:\"\r\n                                        fullWidth\r\n                                        InputLabelProps={{\r\n                                          shrink: true,\r\n                                        }}\r\n                                        // variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        InputProps={{\r\n                                          readOnly: false,\r\n                                          endAdornment: (\r\n                                            <ButtonMUI\r\n                                              // variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                            >\r\n                                              <EditOutlinedIcon />\r\n                                            </ButtonMUI>\r\n                                          ),\r\n                                        }}\r\n                                      />\r\n                                      <Field\r\n                                        component={TextFieldFMUI}\r\n                                        // disabled={true}\r\n                                        type=\"email\"\r\n                                        name=\"email\"\r\n                                        label=\"Email:\"\r\n                                        validate={validateEmail}\r\n                                        fullWidth\r\n                                        InputLabelProps={{\r\n                                          shrink: true,\r\n                                        }}\r\n                                        // variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        InputProps={{\r\n                                          readOnly: false,\r\n                                          endAdornment: (\r\n                                            <ButtonMUI\r\n                                              // variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                            >\r\n                                              <EditOutlinedIcon />\r\n                                            </ButtonMUI>\r\n                                          ),\r\n                                        }}\r\n                                      />\r\n                                      <Field\r\n                                        component={TextFieldFMUI}\r\n                                        // disabled={true}\r\n                                        name=\"website\"\r\n                                        label=\"Website:\"\r\n                                        fullWidth\r\n                                        InputLabelProps={{\r\n                                          shrink: true,\r\n                                        }}\r\n                                        // variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        InputProps={{\r\n                                          readOnly: false,\r\n                                          endAdornment: (\r\n                                            <ButtonMUI\r\n                                              // variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                            >\r\n                                              <EditOutlinedIcon />\r\n                                            </ButtonMUI>\r\n                                          ),\r\n                                        }}\r\n                                      />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                                      Address\r\n                                      <Field\r\n                                        component={TextFieldFMUI}\r\n                                        // disabled={true}\r\n                                        name=\"address.street\"\r\n                                        label=\"Street:\"\r\n                                        fullWidth\r\n                                        InputLabelProps={{\r\n                                          shrink: true,\r\n                                        }}\r\n                                        // variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        InputProps={{\r\n                                          readOnly: false,\r\n                                          endAdornment: (\r\n                                            <ButtonMUI\r\n                                              // variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                            >\r\n                                              <EditOutlinedIcon />\r\n                                            </ButtonMUI>\r\n                                          ),\r\n                                        }}\r\n                                      />\r\n                                      <Field\r\n                                        component={TextFieldFMUI}\r\n                                        // disabled={true}\r\n                                        name=\"address.city\"\r\n                                        label=\"City:\"\r\n                                        fullWidth\r\n                                        InputLabelProps={{\r\n                                          shrink: true,\r\n                                        }}\r\n                                        // variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        InputProps={{\r\n                                          readOnly: false,\r\n                                          endAdornment: (\r\n                                            <ButtonMUI\r\n                                              // variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                            >\r\n                                              <EditOutlinedIcon />\r\n                                            </ButtonMUI>\r\n                                          ),\r\n                                        }}\r\n                                      />\r\n                                      <Field\r\n                                        component={TextFieldFMUI}\r\n                                        // disabled={true}\r\n                                        name=\"address.zipcode\"\r\n                                        label=\"Zipcode:\"\r\n                                        fullWidth\r\n                                        InputLabelProps={{\r\n                                          shrink: true,\r\n                                        }}\r\n                                        // variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        InputProps={{\r\n                                          readOnly: false,\r\n                                          endAdornment: (\r\n                                            <ButtonMUI\r\n                                              // variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                            >\r\n                                              <EditOutlinedIcon />\r\n                                            </ButtonMUI>\r\n                                          ),\r\n                                        }}\r\n                                      />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                                      Company\r\n                                      <Field\r\n                                        component={TextFieldFMUI}\r\n                                        // disabled={true}\r\n                                        name=\"company.name\"\r\n                                        label=\"Company name:\"\r\n                                        fullWidth\r\n                                        InputLabelProps={{\r\n                                          shrink: true,\r\n                                        }}\r\n                                        // variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        InputProps={{\r\n                                          readOnly: false,\r\n                                          endAdornment: (\r\n                                            <ButtonMUI\r\n                                              // variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                            >\r\n                                              <EditOutlinedIcon />\r\n                                            </ButtonMUI>\r\n                                          ),\r\n                                        }}\r\n                                      />\r\n                                      <Field\r\n                                        component={TextFieldFMUI}\r\n                                        // disabled={true}\r\n                                        name=\"company.catchPhrase\"\r\n                                        label=\"Catchphrase:\"\r\n                                        fullWidth\r\n                                        InputLabelProps={{\r\n                                          shrink: true,\r\n                                        }}\r\n                                        // variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        InputProps={{\r\n                                          readOnly: false,\r\n                                          endAdornment: (\r\n                                            <ButtonMUI\r\n                                              // variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                            >\r\n                                              <EditOutlinedIcon />\r\n                                            </ButtonMUI>\r\n                                          ),\r\n                                        }}\r\n                                      />\r\n                                      <Field\r\n                                        component={TextFieldFMUI}\r\n                                        // disabled={true}\r\n                                        name=\"company.bs\"\r\n                                        label=\"Business:\"\r\n                                        fullWidth\r\n                                        InputLabelProps={{\r\n                                          shrink: true,\r\n                                        }}\r\n                                        // variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        InputProps={{\r\n                                          readOnly: false,\r\n                                          endAdornment: (\r\n                                            <ButtonMUI\r\n                                              // variant=\"contained\"\r\n                                              color=\"primary\"\r\n                                            >\r\n                                              <EditOutlinedIcon />\r\n                                            </ButtonMUI>\r\n                                          ),\r\n                                        }}\r\n                                      />\r\n                                    </Grid>\r\n                                  </Grid>\r\n\r\n                                  <Grid container spacing={3}>\r\n                                    <Grid item xs={12} sm={12} md={9} lg={9}>\r\n                                      {props.dirty && (\r\n                                        <CustomToggle\r\n                                          isFullWidth={true}\r\n                                          type=\"submit\"\r\n                                          eventKey=\"1\"\r\n                                          variant=\"contained\"\r\n                                          // disabled={props.handleSubmit()}\r\n                                          disabled={props.isSubmitting}\r\n                                        >\r\n                                          Save\r\n                                        </CustomToggle>\r\n                                      )}\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12} md={3} lg={3}>\r\n                                      <ButtonMUI\r\n                                        fullWidth\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        onClick={() => {\r\n                                          //sending item id for deleting\r\n                                          handleClickOpenDeletingContactConfirmationAlertDialog(\r\n                                            item.id\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        DELETE\r\n                                      </ButtonMUI>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                </FormikForm>\r\n                              )}\r\n                            </Formik>\r\n\r\n                            {/*END CONTACT INFORMATION FORM WITH INPUTS */}\r\n                          </Card.Body>\r\n                        </Accordion.Collapse>\r\n                      </Card>\r\n                      {/* END ACCORDION WITH INFORMATION TABS */}\r\n                    </Accordion>\r\n                  </div>\r\n                </>\r\n              );\r\n            })}\r\n          {/*END CONTACT CARD */}\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contacts;\r\n","import \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Login from \"./components/Login/Login\";\r\nimport Contacts from \"./components/Contacts/Contacts\";\r\nimport { BrowserRouter, Redirect, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/login\" />\r\n        </Route>\r\n        {/* <header className=\"App-header\">CUTE LOGIN FORM</header> */}\r\n        <Route path={\"/login\"} render={() => <Login />} />\r\n        <Route path={\"/contacts\"} render={() => <Contacts />} />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsContainer\":\"Contacts_contactsContainer__20qDj\",\"addContactFormCol\":\"Contacts_addContactFormCol__29DRo\",\"contactCard\":\"Contacts_contactCard__1iQva\",\"contactCards\":\"Contacts_contactCards__2AIZT\",\"avatarAndNameCol\":\"Contacts_avatarAndNameCol__zAXPk\",\"avatar\":\"Contacts_avatar__3pELo\",\"name\":\"Contacts_name__2BL4l\",\"phoneCol\":\"Contacts_phoneCol__2IxEG\",\"phone\":\"Contacts_phone__AR4eX\",\"informationCol\":\"Contacts_informationCol__23jyh\",\"email\":\"Contacts_email__2NBKo\",\"cityCol\":\"Contacts_cityCol__-vuc3\",\"city\":\"Contacts_city__1oDka\",\"contactTab\":\"Contacts_contactTab__MCVoX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__2ifdT\",\"holder\":\"Login_holder__3kaQ9\",\"orbit\":\"Login_orbit__XDkox\",\"card\":\"Login_card__1JMI5\",\"card__text\":\"Login_card__text__2hYQd\"};"],"sourceRoot":""}